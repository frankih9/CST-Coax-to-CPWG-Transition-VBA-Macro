'#Language "WWB-COM"
'#include "vba_globals_all.lib"

Option Explicit

Sub Main

Units.Geometry "mil"
Units.Time "ps"
Units.Frequency "GHz"
	
	'PCB Parameters
	Dim sFilePath As String
	Dim sFileContents As String
	Dim sFileLines() As String

	Dim CrntLyrData() As String 	'Current layer data'
	Dim LyrDie As Double 			'Current layer dielectric constant'

	Dim CrntLyrThkns As Double 		'Current layer thickness'
	Dim CrntTotThkns As Double		'Current total thickness'

	Dim MaxLyrIndex As Integer
	Dim M_Layers As Integer
	Dim D_Layers As Integer

	Dim PCB_Len_TLine As Double
	Dim PCB_Len_Ext As Double

	Dim RngO As Double				'Outer radius of clearance ring'
	Dim RngI As Double				'Inner radius of clearance ring'

	Dim Gulch_Width As Double

	Dim TLine_Width As Double
	Dim TLine_GND_Dist As Double

	Dim i As Integer				'Temporary index for interating the PCB layers
	
	'Via Parameters
	Dim via_rad As Double
	Dim via_lip As Double
	
	Dim x_start As Double
	Dim y_start As Double

	Dim x_loc As Double
	Dim y_loc As Double

	Dim x_lim As Double
	Dim y_lim As Double
	Dim y_lim_back As Double

	Dim di As Integer
	Dim N As Integer

	'Connector Jack Parameters
	Dim Coax_O As Double
	Dim Coax_I As Double

	Dim Coax_Sleeve_Thickness As Double
	Dim Coax_Sleeve_Height As Double

	Dim Flange_Width As Double
	Dim Flange_Height As Double

	Dim Flange_Ped_Width As Double
	Dim Flange_Ped_Height As Double

	Dim Cent_Ext As Double

	Dim Flange_Ped_XLoc(1 To 2) As Double
	Dim Flange_Ped_YLoc(1 To 2) As Double

	Dim xi As Integer
	Dim yi As Integer
	
	BeginHide
		'Ask for PCB stack up file location (Just once since it's "hidden")
		sFilePath = GetFilePath("*.txt", "*.txt", "", "Please select PCB stack-up file in txt format", 0)
		Assign("sFilePath")
	
		StoreDoubleParameter "PCB_Width", 500
		SetParameterDescription  ( "PCB_Width",  "PCB Width"  )
		
		StoreDoubleParameter "PCB_Len_TLine", 450
		SetParameterDescription  ( "PCB_Len_TLine",  "Transmission Line Length"  )

		StoreDoubleParameter "PCB_Len_Ext", 150
		SetParameterDescription  ( "PCB_Len_Ext",  "PCB Extension"  )

		StoreDoubleParameter "RngO", 50
		SetParameterDescription  ( "RngO",  "Coax Center Conductor Clearance, Outer Radius"  )

		StoreDoubleParameter "RngI", 30
		SetParameterDescription  ( "RngI",  "Coax Center Conductor Clearance, Inner Radius"  )

		StoreDoubleParameter "CCC_Via", 20
		SetParameterDescription  ( "CCC_Via",  "Coax Center Conductor Via Radius"  )

		StoreDoubleParameter "TLine_Width", 7
		SetParameterDescription  ( "TLine_Width",  "Transmission Line Width"  )
		
		StoreDoubleParameter "TLine_GND_Dist", 10
		SetParameterDescription  ( "TLine_GND_Dist",  "Transmission Line to Side GND Distance"  )

		StoreDoubleParameter "via_space", 55
		SetParameterDescription  ( "via_space",  "Spacing between ground vias"  )

	EndHide

	'Load in data file
	'sFileName = Mid(sFilePath, InStrRev(sFilePath, "\")+1)
	sFileContents = TextFileToString_LIB(sFilePath)
	sFileLines = Split(sFileContents, vbNewLine)
	
	MaxLyrIndex = UBound(sFileLines)
	M_Layers = 0
	D_Layers = 0

	Gulch_Width = CDbl("TLine_Width") + 2*CDbl("TLine_GND_Dist")

	CrntTotThkns = 0
	
	'Build PCB model
	Component.New "PCB"
	For i = 0 To MaxLyrIndex STEP 1
		CrntLyrData = Split(sFileLines(i), ",")
		CrntLyrThkns = CDbl(CrntLyrData(1))
		LyrDie = CDbl(CrntLyrData(3))
		
		If LyrDie = 0 Then
			'Dielectric constant of layer is 0 so draw metal layer
			With Brick
				.Reset
				.Name (CrntLyrData(0))
				.Component ("PCB")
				.Material ("PEC")
				.Xrange (-0.5*CDbl("PCB_Width"),0.5*CDbl("PCB_Width"))
				.Yrange (-1*CDbl("PCB_Len_TLine"),CDbl("PCB_Len_Ext"))
				.Zrange (0,-1*CrntLyrThkns)
				.Create
			End With
			'Draw the metal clearance for the center conductor via
			With Cylinder
				.Reset
				.Name ("ring_temp")
				.Component ("PCB")
				.Material ("PEC")
				.Axis ("z")
				.Outerradius (CDbl("RngO"))
				.Innerradius (CDbl("RngI"))
				.Xcenter (0)
				.Ycenter (0)
				.Zcenter (0)
				.Zrange (0, -1*CrntLyrThkns)
				.Create
			End With
			'Subtract the ring from the metal plane
			Solid.Subtract "PCB:"&CrntLyrData(0), "PCB:ring_temp"						
			
			If CInt(CrntLyrData(4)) = 1 Then
				'This layer requires a gulch or metal clearance 
				'for a transmission line(may or may not be there) 
				With Brick
					.Reset
					.Name ("gulch_temp")
					.Component ("PCB")
					.Material ("PEC")
					.Xrange (-0.5*Gulch_Width,0.5*Gulch_Width)
					.Yrange (-1*CDbl("PCB_Len_TLine"),-1*CDbl("RngI"))
					.Zrange (0,-1*CrntLyrThkns)
					.Create
				End With
				'Subtract the gulch from the metal plane
				Solid.Subtract "PCB:"&CrntLyrData(0), "PCB:gulch_temp"
				
				If CInt(CrntLyrData(5)) = 1 Then
					'Draw transmission line
					With Brick
						.Reset
						.Name ("transmission_line")
						.Component ("PCB")
						.Material ("PEC")
						.Xrange (-0.5*CDbl("TLine_Width"),0.5*CDbl("TLine_Width"))
						.Yrange (-1*CDbl("PCB_Len_TLine"),0)
						.Zrange (0,-1*CrntLyrThkns)
						.Create
					End With
					'Add the transmission line to the metal plane
					Solid.Add "PCB:"&CrntLyrData(0), "PCB:transmission_line"					
				End If
			End If
			'Advance metal layer count
			M_Layers = M_Layers+1
		
		Else
			'Dielectric constant of layer is not 0 
			'Step 1: Create dielectric material
			With Material
				.Reset
				.Name (CrntLyrData(2))
				.Type "Normal"
				.Epsilon (LyrDie)
				.Create
			End With
			'Step 2: Draw dielectric layer
			With Brick
				.Reset
				.Name (CrntLyrData(0))
				.Component ("PCB")
				.Material (CrntLyrData(2))
				.Xrange (-0.5*CDbl("PCB_Width"),0.5*CDbl("PCB_Width"))
				.Yrange (-1*CDbl("PCB_Len_TLine"),CDbl("PCB_Len_Ext"))
				.Zrange (0,-1*CrntLyrThkns)
				.Create
			End With
			'Advance dielectric layer count
			D_Layers = D_Layers+1
		End If
		
		'Shift the new layer downward by current total thickness
		With Transform
			.Reset
			.Name "PCB:"&CrntLyrData(0)
			.Vector (0, 0, -1*CrntTotThkns)
			.Transform ("Shape", "Translate")
		End With
		'Compute the current total thickness
		CrntTotThkns = CrntTotThkns + CrntLyrThkns
	Next i

	BeginHide
	MsgBox "PCB Stack Up Info:" & vbCr & _
			"Metal Layers" & vbTab & M_Layers & vbCr & _
			"Dielectric Layers" & vbTab & D_Layers & vbCr & _
			"Total Thickness" & vbTab & CrntTotThkns & "mils"
	EndHide

	'Build coax center conductor via
	Component.New "Via_Cent"
	With Cylinder
		.Reset
		.Name ("via_cent")
		.Component ("Via_Cent")
		.Material ("PEC")
		.Axis ("z")
		.Outerradius (CDbl("CCC_Via"))
		.Innerradius (0)
		.Xcenter (0)
		.Ycenter (0)
		.Zcenter (0)
		.Zrange (0, -1*CrntTotThkns)
		.Segments (0)
		.Create
	End With
	For di = 1 To D_Layers STEP 1
		Solid.Insert "PCB:D"&CStr(di), "Via_Cent:via_cent"
	Next di

	'Build and place vias
	'Assume 5 mil via diameter and 5 mil via lip
	via_rad = 2.5
	via_lip = 5
	x_start = 0.5*Gulch_Width + via_lip + via_rad
	y_start = -1*Sqr(CDbl("RngO")^2 - x_start^2) - via_lip - via_rad
	
	'5 mil buffer along the PCB edges
	x_lim = 0.5*CDbl("PCB_Width") - 5
	y_lim = -1*CDbl("PCB_Len_TLine") + 5
	y_lim_back = CDbl("PCB_Len_Ext") - 5

	'Place vias in the right side of PCB in front of center pin
	N = 0
	x_loc = x_start
	y_loc = y_start

	Component.New "Via_1R"
	While x_loc < x_lim
		While y_loc > y_lim
			With Cylinder
				.Reset
				.Name ("v"&CStr(N))
				.Component ("Via_1R")
				.Material ("PEC")
				.Axis ("z")
				.Outerradius (via_rad)
				.Innerradius (0)
				.Xcenter (x_loc)
				.Ycenter (y_loc)
				.Zcenter (0)
				.Zrange (0, -1*CrntTotThkns)
				.Segments (0)
				.Create
			End With
			For di = 1 To D_Layers STEP 1
				Solid.Insert "PCB:D"&CStr(di), "Via_1R:v"&CStr(N)
			Next di
			N = N + 1
			y_loc = y_loc - CDbl("via_space")
		Wend
		y_loc = y_start
		x_loc = x_loc + CDbl("via_space")
	Wend

	'Place vias in the left side of PCB in front of center pin
	N = 0
	x_loc = -1*x_start
	y_loc = y_start

	Component.New "Via_1L"
	While x_loc > -1*x_lim
		While y_loc > y_lim
			With Cylinder
				.Reset
				.Name ("v"&CStr(N))
				.Component ("Via_1L")
				.Material ("PEC")
				.Axis ("z")
				.Outerradius (via_rad)
				.Innerradius (0)
				.Xcenter (x_loc)
				.Ycenter (y_loc)
				.Zcenter (0)
				.Zrange (0, -1*CrntTotThkns)
				.Segments (0)
				.Create
			End With
			For di = 1 To D_Layers STEP 1
				Solid.Insert "PCB:D"&CStr(di), "Via_1L:v"&CStr(N)
			Next di
			N = N + 1
			y_loc = y_loc - CDbl("via_space")
		Wend
		y_loc = y_start
		x_loc = x_loc - CDbl("via_space")
	Wend

	'Place vias in the right side of PCB behind center pin
	N = 0
	x_loc = x_start
	y_loc = y_start + CDbl("via_space")

	Component.New "Via_2R"
	While x_loc < x_lim
		While y_loc < y_lim_back
			If Sqr(x_loc^2 + y_loc^2) >= CDbl("RngO") Then
				With Cylinder
				    .Reset
				    .Name ("v"&CStr(N))
				    .Component ("Via_2R")
				    .Material ("PEC")
				    .Axis ("z")
				    .Outerradius (via_rad)
					.Innerradius (0)
					.Xcenter (x_loc)
					.Ycenter (y_loc)
					.Zcenter (0)
					.Zrange (0, -1*CrntTotThkns)
				    .Segments (0)
				    .Create
				End With
				For di = 1 To D_Layers STEP 1
				Solid.Insert "PCB:D"&CStr(di), "Via_2R:v"&CStr(N)
				Next di
				N = N + 1
			End If
			y_loc = y_loc + CDbl("via_space")
		Wend
		x_loc = x_loc + CDbl("via_space")
		y_loc = y_start + CDbl("via_space")
	Wend

	'Place vias in the left side of PCB behind center pin
	N = 0
	x_loc = -1*x_start
	y_loc = y_start + CDbl("via_space")

	Component.New "Via_2L"
	While x_loc > -1*x_lim
		While y_loc < y_lim_back
			If Sqr(x_loc^2 + y_loc^2) >= CDbl("RngO") Then
				With Cylinder
				    .Reset
				    .Name ("v"&CStr(N))
				    .Component ("Via_2L")
				    .Material ("PEC")
				    .Axis ("z")
				    .Outerradius (via_rad)
					.Innerradius (0)
					.Xcenter (x_loc)
					.Ycenter (y_loc)
					.Zcenter (0)
					.Zrange (0, -1*CrntTotThkns)
				    .Segments (0)
				    .Create
				End With
				For di = 1 To D_Layers STEP 1
				Solid.Insert "PCB:D"&CStr(di), "Via_2L:v"&CStr(N)
				Next di
				N = N + 1
			End If
			y_loc = y_loc + CDbl("via_space")
		Wend
		x_loc = x_loc - CDbl("via_space")
		y_loc = y_start + CDbl("via_space")
	Wend

	'Molex MCX Jack Vertical Thru PCB
	'Part Number: 73366-0061
	Coax_O = 80
	Coax_I = 19

	Coax_Sleeve_Thickness = 10
	Coax_Sleeve_Height = 210

	Flange_Width = 236
	Flange_Height = 33

	Flange_Ped_Width = 59
	Flange_Ped_Height = 8

	Cent_Ext = 73

	Flange_Ped_XLoc(1) = -0.5*Flange_Width
	Flange_Ped_XLoc(2) = 0.5*Flange_Width - Flange_Ped_Width
	Flange_Ped_YLoc(1) = -0.5*Flange_Width
	Flange_Ped_YLoc(2) = 0.5*Flange_Width - Flange_Ped_Width

	Component.New "Coax_Jack"
	'Flange with cutaway hole
	With Brick
		.Reset
		.Name ("Flange")
		.Component ("Coax_Jack")
		.Material ("PEC")
		.Xrange (-0.5*Flange_Width, 0.5*Flange_Width)
		.Yrange (-0.5*Flange_Width, 0.5*Flange_Width)
		.Zrange (Flange_Ped_Height, Flange_Ped_Height + Flange_Height)
		.Create
	End With

	With Cylinder
		.Reset
		.Name ("Flange_Cutaway")
		.Component ("Coax_Jack")
		.Material ("PEC")
		.Axis ("z")
		.Outerradius (Coax_O + Coax_Sleeve_Thickness)
		.Innerradius (0)
		.Xcenter (0)
		.Ycenter (0)
		.Zcenter (0)
		.Zrange (Flange_Ped_Height, Flange_Ped_Height + Flange_Height)
		.Segments (0)
		.Create
	End With

	Solid.Subtract "Coax_Jack:Flange", "Coax_Jack:Flange_Cutaway"
	
	'Coaxial sleeve
	With Cylinder
		.Reset
		.Name ("Coax_Met")
		.Component ("Coax_Jack")
		.Material ("PEC")
		.Axis ("z")
		.Outerradius (Coax_O + Coax_Sleeve_Thickness)
		.Innerradius (Coax_O)
		.Xcenter (0)
		.Ycenter (0)
		.Zcenter (0)
		.Zrange (Flange_Ped_Height, Flange_Ped_Height + Coax_Sleeve_Height)
		.Segments (0)
		.Create
	End With
	
	'PTFE dielectric material
	With Material
		.Reset
		.Name "PTFE (loss free)"
		.Folder ""
		.FrqType "all"
		.Type "Normal"
		.SetMaterialUnit "GHz", "mm"
		.Epsilon "2.1"
		.Mu "1.0"
		.Kappa "0.0"
		.TanD "0.0"
		.TanDFreq "0.0"
		.TanDGiven "False"
		.TanDModel "ConstTanD"
		.KappaM "0.0"
		.TanDM "0.0"
		.TanDMFreq "0.0"
		.TanDMGiven "False"
		.TanDMModel "ConstKappa"
		.DispModelEps "None"
		.DispModelMu "None"
		.DispersiveFittingSchemeEps "General 1st"
		.DispersiveFittingSchemeMu "General 1st"
		.UseGeneralDispersionEps "False"
		.UseGeneralDispersionMu "False"
		.Rho "2200.0"
		.ThermalType "Normal"
		.ThermalConductivity "0.2"
		.HeatCapacity "1.0"
		.SetActiveMaterial "all"
		.MechanicsType "Isotropic"
		.YoungsModulus "0.5"
		.PoissonsRatio "0.4"
		.ThermalExpansionRate "140"
		.Colour "0.75", "0.95", "0.85"
		.Wireframe "False"
		.Transparency "0"
		.Create
	End With
	
	'Create coax dielectric cylinder
	With Cylinder
		.Reset
		.Name ("Coax_Diel")
		.Component ("Coax_Jack")
		.Material ("PTFE (loss free)")
		.Axis ("z")
		.Outerradius (Coax_O)
		.Innerradius (Coax_I)
		.Xcenter (0)
		.Ycenter (0)
		.Zcenter (0)
		.Zrange (Flange_Ped_Height, Flange_Ped_Height + Coax_Sleeve_Height)
		.Segments (0)
		.Create
	End With
	
	'Create four flange pedestals
	For xi = 1 To 2 STEP 1
		For yi = 1 To 2 STEP 1
			With Brick
				.Reset
				.Name ("Flange_Pedestal"&CStr(xi)&CStr(yi))
				.Component ("Coax_Jack")
				.Material ("PEC")
				.Xrange (Flange_Ped_XLoc(xi), Flange_Ped_XLoc(xi)+Flange_Ped_Width)
				.Yrange (Flange_Ped_YLoc(yi), Flange_Ped_YLoc(yi)+Flange_Ped_Width)
				.Zrange (0, Flange_Ped_Height)
				.Create
			End With
		Next
	Next
	
	'Create coax center conductor
	With Cylinder
		.Reset
		.Name ("Coax_Cent_Cond")
		.Component ("Coax_Jack")
		.Material ("PEC")
		.Axis ("z")
		.Outerradius (Coax_I)
		.Innerradius (0)
		.Xcenter (0)
		.Ycenter (0)
		.Zcenter (0)
		.Zrange (-1*Cent_Ext + Flange_Ped_Height, Flange_Ped_Height + Coax_Sleeve_Height)
		.Segments (0)
		.Create
	End With
	'Insert coax center conductor into PCB dielectric layers
	'For di = 1 To D_Layers STEP 1
	'	Solid.Insert "PCB:D"&CStr(di), "Coax_Jack:Coax_Cent_Cond"
	'Next di

End Sub


